/*jslint browser: true*/
/*global define, console, $*/

define(['angular', 'dform'], function (angular) {
  'use strict';

  var moduleDirectives = angular.module('CaliopeWebFormDirectives', []);
  
    moduleDirectives.directive('cwForm', function () {
      var directiveDefinitionObject = {
        restrict : 'E',
        replace : false,
        templateUrl : 'caliopeweb-forms/caliopeweb-form-partial.html',
        scope: {
          id   : '=id',
          mode : '=mode'
        }
      };

      return directiveDefinitionObject;
    
  });


  /**
   * Define the directive for <cw-dform>. This print a html form using the 
   * Dform library based in JQuery.  This directive should be used as an 
   * attribute, example: <form cw-dform="jsonPlantilla"></form>.  
   * 
   * This directive expect one attribute, it is the variable of scope that 
   * contains the representation of form according to the format specific for
   * Dform Library. For more information please visit
   * https://github.com/daffl/jquery.dform
   *  
   */
  moduleDirectives.directive('cwDform', function ($compile) {
    
    /**
     * Define the function for link the directive to AngularJS Context.
     */
    var directiveDefinitionObject = {
        link: function (scope, element, attrs) {

          /*
           * Function that print the form with dForm  
           */
          function renderDForm(templateData) {
            //var plantilla = JSON.parse(templateData);
            var plantilla = templateData;
            try {            
              $(element).dform(plantilla);
            } catch (exDform) {
              console.log('Error generating the dynamic form with dForm', exDform);
            }
            try {
              $compile(element.contents())(scope);
            } catch (exCom) {
              console.log('Error compiling form generated:', exCom);
            }
          }

          /* Watch the change for attribute indicate in attribute cw-dform 
           * an update the form generated by Dform
           */
          scope.$watch(attrs.cwDform, function (value) {
            if (value !== undefined) {
              console.log("Json to render", value);
              renderDForm(value);
            }
          });
          
        }
      };
    
    return directiveDefinitionObject;
    
  });

  /**
   */
  moduleDirectives.directive('cwValidationMess', function ($compile) {

    /**
     * Define the function for link the directive to AngularJS Context.
     */
    var directiveDefinitionObject = {
      restrict : 'E',
      replace : true,
      scope: true,
      templateUrl : 'caliopeweb-forms/caliopeweb-valmess-partial.html',
      link: function (scope, element, attrs) {
        scope['validationType'] = attrs['validationType'];
        $compile(element.contents())(scope);
        var stParams = attrs['params'];
        if( stParams !== undefined ) {
          var params = stParams.split("|");
          var i;
          for( i=0; i<params.length; i++) {
            scope['param'.concat(i)] = params[i];
          }
        }
      }
    };

    return directiveDefinitionObject;
  });

  /**
   * @ngdoc directive
   * @name cw.directive:cwOptions
   * @restrict A
   * @replace false
   *
   * @description
   * Add to HTML 'select' element the possibility of load the option from the server or
   * from scope variable.
   *
   * Use the ng-options angular directive for create the HTML 'option' elements. The data
   * recovered from the server is storage in scope variable named 'options'.
   *
   * Use the service  caliopewebTemplateSrv for invoke the functionality that load and
   * communicates with the server across websocket
   *
   * @param remote: If value is true then the data is load from the server, for false then
   * the data is load from scope variable.  When is true then entity attribute is required.
   * When is false then scopevar attribute is required.
   *
   * @param entity: Name of the entity that contains the data.
   *
   */
  moduleDirectives.directive('cwOptions', ['caliopewebTemplateSrv', "$compile", function (caliopewebTemplateSrv, $compile) {

    /**
     * Get the final value of a attribute in a object, where attribute is represented by a string notation that indicate the
     * path to final attribute..
     *
     * Example.
     * obj = { "user" : {
     *            "username" : {value : "username"},
     *            "name"  : {value : "NAME USER"}
     *          }
     *       }
     * strAttrValue = user.name.value
     * charSplit = '.'
     *
     * Return "NAME USER"
     *
     * @param obj Object with the data
     * @param strAttrValue String that represent the attribute final to return value.
     * @param charSplit A character that indicate the separation of attributes in strAttrValue
     * @returns {*} The value of attribute
     */
    function getFinalValueFromString(obj, strAttrValue, charSplit) {
      var fieldsValue = strAttrValue.split(charSplit);
      var j;
      var objValue = obj;
      for(j=0;j<fieldsValue.length;j++) {
        try {
          objValue = objValue[fieldsValue[j]];
        } catch (ex) {
          console.error('Error creando opción en html select. No se encontró el atributo ' + strAttrValue + ' en ', obj );
        }
      }
      return objValue;
    }

    var ATTNAME_LOADREMOTE = 'fromserver';
    var ATTNAME_METHOD = 'method';
    var ATTNAME_FIELDVALUE = 'fieldvalue';
    var ATTNAME_FIELDDESC = 'fielddesc';
    var ATTNAME_FIELDID = 'formid';
    var ATTNAME_FIELD_DATALIST = 'fieldDatalist';
    var ATTNAME_OPTIONSNAME = 'optionsName';

    /**
     * Define the function for link the directive to AngularJS Context.
     */
    var directiveDefinitionObject = {

      restrict : 'A',
      replace : false,
      scope: false,
      link: function (scope, element, attrs) {
        if( attrs[ATTNAME_LOADREMOTE] !== undefined && attrs[ATTNAME_LOADREMOTE] == 'true') {

          var fieldId = attrs[ATTNAME_FIELDID];
          var promise =
              caliopewebTemplateSrv.loadDataOptions(attrs[ATTNAME_METHOD], fieldId, undefined);

          promise.then(function(dataResponse) {
            var scopeOptionsName = attrs[ATTNAME_OPTIONSNAME];
            scope[scopeOptionsName] = [];
            if( dataResponse != undefined ) {
              var i;
              var attrFieldValue = attrs[ATTNAME_FIELDVALUE];
              var attrFieldDesc = attrs[ATTNAME_FIELDDESC];
              if(attrs[ATTNAME_FIELD_DATALIST] !== undefined) {
                dataResponse =
                    getFinalValueFromString(dataResponse, attrs[ATTNAME_FIELD_DATALIST], '.');
              }
              for(i=0; i<dataResponse.length; i++) {
                var option = {
                  value : getFinalValueFromString(dataResponse[i], attrFieldValue, '.'),
                  desc  : getFinalValueFromString(dataResponse[i], attrFieldDesc, '.')
                }
                scope[scopeOptionsName].push(option)
              }
              var valSelected = scope[attrs['name']];
              if( valSelected !== undefined ) {
                var optionSelect = jQuery.grep(scope[scopeOptionsName], function(obj) {
                  if( obj !== undefined && obj.hasOwnProperty('value') &&
                      obj.value === valSelected) {
                    return true;
                  } else {
                    return false;
                  }
                });
                if( optionSelect !== undefined && optionSelect.length > 0 ) {
                  scope[attrs['name']] = optionSelect[0].value;
                }
                scope.$eval("ente_asignado=ndochoa");
                //scope.$apply();
                //$compile(element.contents())(scope);
              }

            }
          });

        }
        //$compile(element.contents())(scope);
      }
    };

    return directiveDefinitionObject;
  }]);

  
});

